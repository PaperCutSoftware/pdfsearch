// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package locations

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

// TextLocation is a serializable version of UniPDF's extractor.TextMark.
type TextLocation struct {
	_tab flatbuffers.Table
}

func GetRootAsTextLocation(buf []byte, offset flatbuffers.UOffsetT) *TextLocation {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TextLocation{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TextLocation) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TextLocation) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TextLocation) Offset() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TextLocation) MutateOffset(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *TextLocation) Llx() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *TextLocation) MutateLlx(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *TextLocation) Lly() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *TextLocation) MutateLly(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func (rcv *TextLocation) Urx() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *TextLocation) MutateUrx(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func (rcv *TextLocation) Ury() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *TextLocation) MutateUry(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func TextLocationStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func TextLocationAddOffset(builder *flatbuffers.Builder, offset uint32) {
	builder.PrependUint32Slot(0, offset, 0)
}
func TextLocationAddLlx(builder *flatbuffers.Builder, llx float32) {
	builder.PrependFloat32Slot(1, llx, 0.0)
}
func TextLocationAddLly(builder *flatbuffers.Builder, lly float32) {
	builder.PrependFloat32Slot(2, lly, 0.0)
}
func TextLocationAddUrx(builder *flatbuffers.Builder, urx float32) {
	builder.PrependFloat32Slot(3, urx, 0.0)
}
func TextLocationAddUry(builder *flatbuffers.Builder, ury float32) {
	builder.PrependFloat32Slot(4, ury, 0.0)
}
func TextLocationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
