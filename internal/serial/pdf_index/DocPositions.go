// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package pdf_index

import (
	flatbuffers "github.com/google/flatbuffers/go"

	locations "github.com/papercutsoftware/pdfsearch/internal/serial/locations"
)

type DocPositions struct {
	_tab flatbuffers.Table
}

func GetRootAsDocPositions(buf []byte, offset flatbuffers.UOffsetT) *DocPositions {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DocPositions{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *DocPositions) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DocPositions) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DocPositions) Path() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DocPositions) DocIdx() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DocPositions) MutateDocIdx(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *DocPositions) PageDpl(obj *locations.DocPageLocations, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *DocPositions) PageDplLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DocPositions) PageNums(j int) uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *DocPositions) PageNumsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DocPositions) PageTexts(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *DocPositions) PageTextsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func DocPositionsStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func DocPositionsAddPath(builder *flatbuffers.Builder, path flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(path), 0)
}
func DocPositionsAddDocIdx(builder *flatbuffers.Builder, docIdx uint64) {
	builder.PrependUint64Slot(1, docIdx, 0)
}
func DocPositionsAddPageDpl(builder *flatbuffers.Builder, pageDpl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(pageDpl), 0)
}
func DocPositionsStartPageDplVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DocPositionsAddPageNums(builder *flatbuffers.Builder, pageNums flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(pageNums), 0)
}
func DocPositionsStartPageNumsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DocPositionsAddPageTexts(builder *flatbuffers.Builder, pageTexts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(pageTexts), 0)
}
func DocPositionsStartPageTextsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func DocPositionsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
